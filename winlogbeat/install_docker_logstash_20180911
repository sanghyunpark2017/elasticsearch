
#2018년 9월 10일 작성함
#logstash 6.4.0이고, java "1.8.0_65"에 최적

################################
# 실수노트
################################
1.rpm버전 설치 시 systemctl stsrt 시 D-Bus 에러 발생
  docker official하게는 5.x 버전까지만 지원하고 이후로는 elastic자체에서 이미지 제공하는 30일만 무료
2.logstash는 foreground가 아닌 daemon으로 하자 
3.logstash docker와 kube 올리고, service까지 d올리고, winlogbeat에서 haproxy 통해서 등어가는 것이 잘 되지 않음
4.logstash 같은 데몬 형태으 자주 변경되지 않을 것들은 이미지이름 자체에 날짜시간을 넣자

################################
# 도커이미지
################################

1) (X) elasticsearch 홈페이지 가이드에 따라 이미지 사용
>>Centos7이고, logstash 계정으로 구동됨(툴 등은 설치 불가)
>>30일간만 사용 할 수 있음
>>6.4.0 최신버전 사용가능

2) (X) Ofiicial logstash이미지
>>우부트OS에 5.6.X 오래된 버전

3) (O) 자체 제작하여 사용하자


################################
# 자체OS로 부터 LOGSTASH 설치
################################
#기본 CMD가 /bin/sh이므로 kube에서 기동해야 됨
#root계정으로 구동하게 됨 


docker run -dit --name "logstash-security" reg.hmp.com:443/mycentos7beta:1
docker ps

docker exec -it logstash-security /bin/bash

###########################
# JAVA 설치(root계정)
###########################

yum install -y java-1.8.0-openjdk

/usr/bin/java -version

------------------------------------------------------------------
cat << EOF >> /root/.bashrc
###JAVA
export JAVA_HOME=/usr/bin/java
export PATH=$PATH:$JAVA_HOME/bin/
export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib/tools.jar
EOF
------------------------------------------------------------------

exit

docker exec -it logstash-security /bin/bash
  java -version
  echo $JAVA_HOME

###########################
# logstash 설치(root계정)
###########################

#바이러리 zip파일로 압추된 것을 사용할 것이며, 공식사이트에서 다운로드 받아서 로컬 wget서버에 올려놓는다

yum install -y wget unzip

mkdir -p /app
cd /app
wget  http://10.10.63.63:8089/logstash-6.4.0.zip
unzip logstash-6.4.0.zip

##기본 설정파일 백업
cd /app/logstash-6.4.0/config
cp jvm.options jvm.options.org
cp log4j2.properties log4j2.properties.org
cp logstash-sample.conf logstash-sample.conf.org
cp logstash.yml logstash.yml.org
cp pipelines.yml pipelines.yml.org
cp startup.options startup.options.org


#기본 테스트
vi /root/logstash.conf
---------------------------------------------------------------------------------------------------------
input { 
  stdin { }
}

output {
  elasticsearch { hosts => ["10.10.64.91:9200", "10.10.64.92:9200", "10.10.64.93:9200"] }
  stdout { codec => rubydebug }
}
---------------------------------------------------------------------------------------------------------
/app/logstash-6.4.0/bin/logstash -f /root/logstash.conf


>> 엘라스틱 서치 서비스가 실행되어 있어야 함
>> 잠시 후 메시지가 나오면 성공적으로 설치된 것이며
>> 화면입력해서 elasticeseacrh에 logstash****로 시작하는 인덱스가 생성되고 내용이 보이면 정상임
>> CTRL+C로 종료하면서 나온 후 설치파일은 삭제한다.

cd /app
rm logstash-6.4.0.zip

################################
# Logstash 설정
################################
#인덱스 뒤에 날짜 붙일 때,,, 처리시간이 아닌 데이터 안의 날짜로 해볼 것
#stdout은 나중에 뺌

vi /root/logstash.conf
---------------------------------------------------------------------------------------------------------
input { 
  beats {
    port => "5555"
  }
}

filter {
  geoip {
    source => "[event_data][IpAddress]"
  }
}

output {
  elasticsearch { 
    hosts => ["10.10.64.91:9200", "10.10.64.92:9200", "10.10.64.93:9200"]
    index => "security-logs-%{+yyyy-MM-dd}"
  }
#  stdout { codec => rubydebug }
}
---------------------------------------------------------------------------------------------------------

/app/logstash-6.4.0/bin/logstash -f /root/logstash.conf




###########################
# logstash 도커커밋 및 업로드
###########################

docker stop logstash-security


#베이스 이미지는 원본 보관용으로 만들고, seucrity 용도로 하나 더 만든다
docker ps -a
docker commit CONTAINERID   reg.hmp.com:443/logstash-640-security-20180910-1437:latest

docker images
docker push reg.hmp.com:443/logstash-640-security-20180910-1437:latest


curl https://reg.hmp.com/v2/_catalog



################################################################
# Logstash 쿠버네티스 구동(deployment & service
################################################################

#kubeadm서버로 이동


vi /root/logstash-security-deployment.yaml
------------------------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash-security-deployment
  namespace: default
  labels:
    app: logstash-security
    tier: frontend
    role: making
    deployment: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash-security
      tier: frontend
      role: making
      deployment: v1
  template:
    metadata:
      labels:
        app: logstash-security
        tier: frontend
        role: making
        deployment: v1
    spec:
      containers:
      - name: logstash-security-deployment-pod
        image: reg.hmp.com/logstash-640-security:1
        ports:
        - containerPort: 5555
        resources:
          limits:
            memory: "2Gi"
          requests:
            memory: "1Gi"
        command: ["/app/logstash-6.4.0/bin/logstash", "-f", "/root/logstash.conf"]        
------------------------------------------------------------------------------------------------------------

kubectl delete -f /root/logstash-security-deployment.yaml

kubectl apply -f /root/logstash-security-deployment.yaml

kubectl get pods
kubectl logs 

kubectl get pods
kubectl exec -it ******** /bi/bash
  netstat -nlp
  ps -ef
  

############
# 서비스
############


vi /root/logstash-security-service.yaml
-----------------------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: logstash-security-svc
  namespace: default
spec:
  type: NodePort
  selector:
    app: logstash-security
    tier: frontend
    role: making
    deployment: v1    
  ports:
  - name: http
    protocol: TCP
    port: 5555
    nodePort: 32001  
-----------------------------------------------------------------------------------------------


kubectl apply -f /root/logstash-security-service.yaml

kubectl get svc


############
# HAPROXY
############

#기존 설정 맨뒤에 추가

cd /etc/haproxy
bk haproxy.cfg

vi /etc/haproxy/haproxy.cfg
-----------------------------------------------------------------------------------------------
##############################
# logstash-security
##############################

frontend logstash-security
  bind *:5555
  mode tcp
  option tcplog
  default_backend logstash-security
  
backend logstash-security  
  mode tcp
  option tcplog
  option tcp-check
  balance roundrobin
  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
  server t1vkubework1 10.10.64.64:32001 check fall 3 rise 2
  server t1vkubework2 10.10.64.65:32001 check fall 3 rise 2
  server t1vkubework3 10.10.64.66:32001 check fall 3 rise 2
-----------------------------------------------------------------------------------------------

systemctl enable haproxy.service
systemctl restart haproxy.service
systemctl status haproxy.service

netstat -nlp

sudo firewall-cmd --permanent --zone=public --add-port=5555/tcp
sudo firewall-cmd --reload


#그럼 security-logs-로 시작하는 인덱스에 로그들이 쌓임
#로그온 유형은 IIS로그인 유형(8)을 제외한 것만 쌓이도록 함


#로그온이벤트(4624)에 포함된 Logon Type
2 : Interactive
    (logon at keyboard and screen of system) Windows 2000 records Terminal Services logon as this type rather than Type 10.
3 : Network 
    (i.e. connection to shared folder on this computer from elsewhere on network or IIS logon - 
    Never logged by 528 on W2k and forward. See event 540)
    >>콘솔 또는 원격터미널 로그인
4 : Batch (i.e. scheduled task)
5 : Service (Service startup)
7 : Unlock (i.e. unnattended workstation with password protected screen saver)
8 : NetworkCleartext 
    (Logon with credentials sent in the clear text. Most often indicates a logon to IIS with "basic authentication")
    >>IIS 로그인
    
9 : NewCredentials
10 : RemoteInteractive (Terminal Services, Remote Desktop or Remote Assistance)
11 : CachedInteractive (logon with cached domain credentials such as when logging on to a laptop when away from the network)


[LogonType 유형]
2 : 대화형 로그인
3 : 네트워크 로그인
(제외)4 : 스케쥴작업 로그인
(제외)5 : 서비스계정 로그인(시작)
(제외)7 : 잠금해제(스크린세이버)
(제외)8 : IIS로그인(기본인증)
(제외)9 : NewCredentials
10 : 원격터미널
(제외)11 : 캐시된 로그인




######################################
2018/09/11일자 winlogbeat 설정
######################################
#output은 elk가 아닌 logstash로 변경
#로그인이벤트만 가져오고, winlogbeat에서 로그온유형을 필터링함

winlogbeat.event_logs:
  - name: Security
    ignore_older: 1m  
    event_id: 4624

processors:
- drop_event:
    when.or:
      - equals.event_data.LogonType: '4'
      - equals.event_data.LogonType: '5'
      - equals.event_data.LogonType: '7'
      - equals.event_data.LogonType: '8'
      - equals.event_data.LogonType: '9'
      - equals.event_data.LogonType: '11'

output.logstash:
  hosts: ["10.10.64.99:5555"]

setup.kibana:
  host: "10.10.64.91:5601"

logging.to_files: true
logging.files:
  path: C:/ProgramData/winlogbeat/Logs
logging.level: error





###########################################
# LogStash 필터링 수정 (쿠버네티스 볼륨 사용)
###########################################









